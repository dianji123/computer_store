<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hzh.computer_store.mapper.AddressMapper">
    <!--namespace用于指定当前的映射文件和哪个接口进行映射,指定接口的完整文件路径-->
    <!--ResultMap标签自定义映射规则
        id属性:这个映射规则分配一个唯一的id值,SQL语句通过 resultMap="id属性值" 使用这个映射规则
        type属性:取值是一个类,表示SQL语句的查询结果与java中哪个实体类进行结果集的映射
     -->
    <resultMap id="AddressEntityMap" type="com.hzh.computer_store.entity.Address">
        <!--自定义映射规则，字段名称一致的也可以映射
            在定义映射规则时无论主键名称是否一致都不能省
            column 数据库字段名
            property 类的属性名
            -->
        <id column="aid" property="aid" />
<!--        <result column="uid" property="uid" />-->
        <result column="province_name" property="provinceName" />
        <result column="province_code" property="provinceCode" />
        <result column="city_name" property="cityName" />
        <result column="city_code" property="cityCode" />
        <result column="area_name" property="areaName" />
        <result column="area_code" property="areaCode" />
        <result column="is_default" property="isDefault" />
        <result column="created_user" property="createdUser" />
        <result column="created_time" property="createdTime" />
        <result column="modified_user" property="modifiedUser" />
        <result column="modified_time" property="modifiedTime" />
    </resultMap>

    <!--id 映射接口方法名-->
    <!--useGeneratedKeys="true" 开启字段的值递增(通常是主键递增)
        keyProperty="uid" uid表字段递增
        -->
    <!--新增地址-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="aid">
        INSERT INTO t_address (uid, `name`, province_name, province_code, city_name, city_code, area_name, area_code, zip, address,
            phone, tel, tag, is_default, created_user, created_time, modified_user, modified_time)
            VALUES (
                #{uid}, #{name}, #{provinceName}, #{provinceCode}, #{cityName}, #{cityCode}, #{areaName}, #{areaCode}, #{zip}, #{address},
                #{phone}, #{tel}, #{tag}, #{isDefault}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>


    <!--select查询的结果:一个对象或多个对象
        resultType:指定对应映射类的类型,要求完整的包结构,要求表的字段的名和类的属性名一致
        resultMap:当表的字段和类的对象属性名不一致时,使用自定义查询结果集的映射规则
        通过<resultmap>标签的id来使用自定义规则
    -->

    <!--查询地址总数-->
    <!--resultType="java.lang.Integer"不写会报错,因为Integer不是基本数据类型-->
    <!--表示返回一个Integer对象 count(*)-->
    <select id="countByUid" resultType="java.lang.Integer">
        select count(*) from t_address where uid=#{uid}
    </select>

    <!--查询所有地址数据-->
    <select id="findByUid" resultMap="AddressEntityMap" >
        select * from t_address where uid=#{uid}
        order by is_default DESC, created_time DESC
    </select>

    <!--根据aid查询收货地址数据-->
    <select id="findByAid" resultMap="AddressEntityMap">
        select * from t_address where aid=#{aid}
    </select>

    <!--根据用户uid修改用户的收货地址统一设置为非默认-->
    <update id="updateNonDefault">
        update t_address set is_default=0 where uid=#{uid}
    </update>

    <!--将用户选中的这条记录设置为默认收货地址-->
    <update id="updateDefaultByAid">
        update t_address set is_default=1,
                             modified_user=#{modifiedUser},
                             modified_time=#{modifiedTime}
        where aid=#{aid}
    </update>

    <!--根据收货地址aid删除收货地址数据-->
    <delete id="deleteByAid">
        delete from t_address where aid=#{aid}
    </delete>

    <!--根据用户uid查询用户最后一次被修改的收货地址数据-->
    <select id="findLastModified" resultMap="AddressEntityMap">
        select * from t_address where uid=#{uid}
        order by modified_time DESC limit 0,1
    </select>


</mapper>
